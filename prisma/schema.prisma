
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Transmission {
  AUTOMATIC
  MANUAL
}


model Car {
  id          String   @id @default(uuid())
  name        String
  brand       String
  model       String
  year        Int
  color       String
  image       String   // URL or file path to the car image
  transmision Transmission
  seat        Int
  costPerDay  Decimal  @default(0.00) // Daily rental cost
  location    String
  available   Boolean  @default(true) // Indicates if the car is available for rent
  bookings    Booking[] // One-to-many relationship with bookings
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String   @unique
  role      Role     @default(USER) // Enum for user roles (Admin/User)
  bookings  Booking[] // One-to-many relationship with bookings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}
model Booking {
  id          String   @id @default(uuid())
  userId      String
  carId       String
  user        User   @relation(fields: [userId], references: [id])
  car         Car   @relation(fields: [carId], references: [id])
  startDate   DateTime // The start date of the rental
  endDate     DateTime // The end date of the rental
  totalCost   Decimal  @default(0.00)
  status      BookingStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  payment Payment?
  bank    Bank?
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Payment {
  id          String   @id @default(uuid())
  bookingId   String  @unique
  amount      Decimal  @default(0.00)
  paymentDate DateTime @default(now())
  status      PaymentStatus @default(PENDING)
  booking     Booking @relation(fields: [bookingId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Bank {
  id          String   @id @default(uuid())
  bookingId   String   @unique
  name        String   
  accountNum  Int      @unique
  accountName String   
  image       String  
  booking     Booking @relation(fields: [bookingId], references: [id])
}
